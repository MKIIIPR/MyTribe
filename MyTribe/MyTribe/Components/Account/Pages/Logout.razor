@page "/Account/Logout"
@using Microsoft.AspNetCore.Identity
@using MyTribe.Data
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<Logout> Logger

<PageTitle>Log out</PageTitle>

@code {
    protected override async Task OnInitializedAsync()
    {
        await LogoutAsync();
    }

    private async Task LogoutAsync()
    {
        try
        {
            // Benutzer abmelden
            await SignInManager.SignOutAsync();

            // Alle Cookies löschen (zusätzliche Sicherheit)
            if (HttpContext?.Response != null)
            {
                // Identity Cookie explizit löschen
                HttpContext.Response.Cookies.Delete(IdentityConstants.ApplicationScheme);
                HttpContext.Response.Cookies.Delete(IdentityConstants.ExternalScheme);
                HttpContext.Response.Cookies.Delete(IdentityConstants.TwoFactorUserIdScheme);

                // Weitere sicherheitskritische Cookies löschen
                foreach (var cookie in HttpContext.Request.Cookies)
                {
                    if (cookie.Key.StartsWith(".AspNetCore") ||
                        cookie.Key.StartsWith("Identity") ||
                        cookie.Key.Contains("Auth"))
                    {
                        HttpContext.Response.Cookies.Delete(cookie.Key);
                    }
                }
            }

            Logger.LogInformation("User logged out successfully.");

            // Redirect zur Login-Seite oder Homepage
            RedirectManager.RedirectTo("/Account/Login");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during logout process");
            // Trotz Fehler zur Login-Seite weiterleiten
            RedirectManager.RedirectTo("/Account/Login");
        }
    }

    [SupplyParameterFromForm]
    public string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    public string? QueryReturnUrl { get; set; }

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }
}