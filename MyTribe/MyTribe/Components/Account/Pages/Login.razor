@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using MyTribe.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Log in</MudText>

<MudGrid>
    <MudItem md="6">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mb-4">@errorMessage</MudAlert>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <MudAlert Severity="Severity.Success" Class="mb-4">@successMessage</MudAlert>
        }

        <MudGrid>
            <MudItem md="12">
                <MudTextField @bind-Value="Input.Email"
                              Label="Email"
                              Placeholder="name@example.com"
                              InputType="InputType.Email"
                              Variant="Variant.Outlined"
                              Disabled="@isLoading"
                              For="@(() => Input.Email)" />
            </MudItem>
            <MudItem md="12">
                <MudTextField @bind-Value="Input.Password"
                              Label="Password"
                              Placeholder="Enter your password"
                              InputType="InputType.Password"
                              Variant="Variant.Outlined"
                              Disabled="@isLoading"
                              For="@(() => Input.Password)" />
            </MudItem>
            <MudItem md="12">
                <MudCheckBox @bind-Value="Input.RememberMe"
                             Label="Remember me"
                             Disabled="@isLoading" />
            </MudItem>
            <MudItem md="12">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           FullWidth="true"
                           OnClick="LoginUser"
                           Disabled="@isLoading">
                    @if (isLoading)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Logging in...</MudText>
                    }
                    else
                    {
                        <MudText>Log in</MudText>
                    }
                </MudButton>
            </MudItem>
        </MudGrid>

        <MudGrid Class="mt-4">
            <MudItem md="12">
                <MudLink Href="Account/ForgotPassword">Forgot your password?</MudLink><br />
                <MudLink Href="@GetRegisterUrl()">Register as a new user</MudLink><br />
                <MudLink Href="Account/ResendEmailConfirmation">Resend email confirmation</MudLink>
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudItem md="6">
        <MudText GutterBottom="true" Typo="Typo.body1">Use another service to log in.</MudText>
        <MudText Typo="Typo.caption">External login providers would go here</MudText>
    </MudItem>
</MudGrid>

@code {
    private string? errorMessage;
    private string? successMessage;
    private bool isLoading = false;

    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private string? Message { get; set; }

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Success/Error Messages von Query Parameters
        if (!string.IsNullOrEmpty(Message))
        {
            if (Message.Contains("success"))
                successMessage = "Registration successful! Please log in.";
            else if (Message.Contains("logout"))
                successMessage = "You have been logged out.";
        }

        if (HttpContext != null && HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            try
            {
                await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Error clearing external authentication");
            }
        }
    }

    private async Task LoginUser()
    {
        if (!IsFormValid()) return;

        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

            if (result.Succeeded)
            {
                Logger.LogInformation("User {Email} logged in", Input.Email);
                RedirectManager.RedirectTo(ReturnUrl ?? "/");
                return;
            }

            if (result.RequiresTwoFactor)
            {
                RedirectManager.RedirectTo("Account/LoginWith2fa",
                    new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
                return;
            }

            if (result.IsLockedOut)
            {
                Logger.LogWarning("User {Email} account locked out", Input.Email);
                RedirectManager.RedirectTo("Account/Lockout");
                return;
            }

            errorMessage = "Invalid login attempt.";
            Logger.LogWarning("Failed login attempt for {Email}", Input.Email);
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again.";
            Logger.LogError(ex, "Error during login for {Email}", Input.Email);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private bool IsFormValid()
    {
        if (string.IsNullOrWhiteSpace(Input.Email))
        {
            errorMessage = "Email is required.";
            return false;
        }

        if (string.IsNullOrWhiteSpace(Input.Password))
        {
            errorMessage = "Password is required.";
            return false;
        }

        return true;
    }

    private string GetRegisterUrl()
    {
        if (!string.IsNullOrEmpty(ReturnUrl))
        {
            return NavigationManager.GetUriWithQueryParameters("Account/Register",
                new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl });
        }
        return "Account/Register";
    }

    private sealed class InputModel
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
        public bool RememberMe { get; set; }
    }
}