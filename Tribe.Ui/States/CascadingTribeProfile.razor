@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.Extensions.Logging
@using Tribe.Client.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<CascadingTribeProfile> Logger

<CascadingValue Value="Profile">
    @Child
</CascadingValue>

@code {
    [Parameter] public RenderFragment Child { get; set; } = default!;

    public TribeProfile? Profile { get; private set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    private ClaimsPrincipal? _currentUser;

    protected override async Task OnParametersSetAsync()
    {
        var authStateFromCascading = await AuthenticationStateTask;
        var userFromCascading = authStateFromCascading.User;

        var authStateFromProvider = await AuthStateProvider.GetAuthenticationStateAsync();
        var userFromProvider = authStateFromProvider.User;

        Logger.LogInformation("User from Cascading AuthenticationState: Authenticated={Authenticated}, Name={Name}",
            userFromCascading.Identity?.IsAuthenticated,
            userFromCascading.Identity?.Name);

        Logger.LogInformation("User from AuthenticationStateProvider: Authenticated={Authenticated}, Name={Name}",
            userFromProvider.Identity?.IsAuthenticated,
            userFromProvider.Identity?.Name);

        if (IsUserChanged(_currentUser, userFromCascading))
        {
            _currentUser = userFromCascading;

            if (userFromCascading.Identity?.IsAuthenticated == true)
            {
                await LoadCurrentTribeProfileAsync();
            }
            else
            {
                Profile = null;
                StateHasChanged();
            }
        }
    }

    private bool IsUserChanged(ClaimsPrincipal? oldUser, ClaimsPrincipal newUser)
    {
        if (oldUser == null) return true;

        bool oldAuthenticated = oldUser.Identity?.IsAuthenticated ?? false;
        bool newAuthenticated = newUser.Identity?.IsAuthenticated ?? false;

        if (oldAuthenticated != newAuthenticated)
            return true;

        if (!oldAuthenticated && !newAuthenticated)
            return false;

        var oldId = oldUser.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        var newId = newUser.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        return oldId != newId;
    }

    private async Task LoadCurrentTribeProfileAsync()
    {
        var userId = _currentUser?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (!string.IsNullOrEmpty(userId))
        {
            Profile = await _clientApiService.GetByIdAsync<TribeProfile>(userId);
            StateHasChanged();
        }
    }

    [Inject]
    private IClientApiService _clientApiService { get; set; } = default!;
}
