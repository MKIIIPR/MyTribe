@using MudBlazor
@using static Tribe.Bib.CommunicationModels.ComModels

<MudText Typo="Typo.h5" Class="mb-4">Payment Method</MudText>

@if (SelectedPlan != null)
{
    <!-- Final Order Summary -->
    <MudPaper Class="pa-4 mb-4" Elevation="3">
        <MudText Typo="Typo.subtitle1" Class="mb-3">
            <MudIcon Icon="@Icons.Material.Filled.Receipt" Class="mr-2" />
            Final Order Summary
        </MudText>
        <MudGrid>
            <MudItem xs="8">
                <MudText><strong>@SelectedPlan.Name</strong> - @SelectedCurrency</MudText>
                <MudText  Color="Color.Secondary">@($"{SelectedPlan.TokenMenge:N0} Tokens included")</MudText>
            </MudItem>
            <MudItem xs="4" Class="text-right">
                @{
                    var pricing = SelectedPlan.PricingList?.FirstOrDefault(p => p.Duration == GetDurationFromPaymentData());
                }
                @if (pricing != null)
                {
                    <MudText Typo="Typo.h5" Color="Color.Primary">
                        <strong>@GetFormattedPrice(pricing, SelectedCurrency)</strong>
                    </MudText>
                }
            </MudItem>
        </MudGrid>
    </MudPaper>
}

<!-- Payment Method Selection -->
<MudPaper Class="pa-4 mb-4" Elevation="2">
    <MudTabs Elevation="0" Rounded="true" PanelColor="Color.Default" Class="mt-4">
        <MudTabPanel Text="Credit Card">
            <ChildContent>
                <MudPaper Class="pa-4" Elevation="0">
                    <MudText Typo="Typo.h6" Class="mb-3">
                        <MudIcon Icon="@Icons.Material.Filled.CreditCard" Class="mr-2" />
                        Credit Card Details
                    </MudText>
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="PaymentData.CardNumber"
                                          Label="Card Number"
                                          Margin="Margin.Dense"
                                          Placeholder="1234 5678 9012 3456"
                                          Variant="Variant.Outlined"
                                          Required="true"
                                          OnBlur="NotifyDataChanged"
                                          Error="@(string.IsNullOrWhiteSpace(PaymentData.CardNumber) && _validationAttempted)"
                                          ErrorText="Card number is required" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="PaymentData.CardHolderName"
                                          Label="Cardholder Name"
                                          Margin="Margin.Dense"
                                          Variant="Variant.Outlined"
                                          Required="true"
                                          OnBlur="NotifyDataChanged"
                                          Error="@(string.IsNullOrWhiteSpace(PaymentData.CardHolderName) && _validationAttempted)"
                                          ErrorText="Cardholder name is required" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField @bind-Value="PaymentData.ExpiryDate"
                                          Label="Expiry Date (MM/YY)"
                                          Margin="Margin.Dense"
                                          Placeholder="12/25"
                                          Variant="Variant.Outlined"
                                          Required="true"
                                          OnBlur="NotifyDataChanged"
                                          Error="@(string.IsNullOrWhiteSpace(PaymentData.ExpiryDate) && _validationAttempted)"
                                          ErrorText="Expiry date is required" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField @bind-Value="PaymentData.CvvCode"
                                          Label="CVV"
                                          Margin="Margin.Dense"
                                          Placeholder="123"
                                          Variant="Variant.Outlined"
                                          InputType="InputType.Password"
                                          Required="true"
                                          OnBlur="NotifyDataChanged"
                                          Error="@(string.IsNullOrWhiteSpace(PaymentData.CvvCode) && _validationAttempted)"
                                          ErrorText="CVV is required" />
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </ChildContent>
        </MudTabPanel>

        <MudTabPanel Text="PayPal">
            <ChildContent>
                <MudPaper Class="pa-4" Elevation="0">
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.Info" Color="Color.Info" Class="mr-2" />
                        <MudText>You will be redirected to PayPal to complete your payment securely.</MudText>
                    </div>
                </MudPaper>
            </ChildContent>
        </MudTabPanel>

        <MudTabPanel Text="Bank Transfer">
            <ChildContent>
                <MudPaper Class="pa-4" Elevation="0">
                    <div class="d-flex align-center mb-2">
                        <MudIcon Icon="@Icons.Material.Filled.Info" Color="Color.Info" Class="mr-2" />
                        <MudText><strong>Bank Transfer Instructions</strong></MudText>
                    </div>
                    <MudText Class="mb-2">Please transfer the amount to the following account:</MudText>
                    <MudText><strong>IBAN:</strong> DE89 3704 0044 0532 0130 00</MudText>
                    <MudText><strong>BIC:</strong> COBADEFFXXX</MudText>
                    <MudText><strong>Reference:</strong> Your Order ID will be provided after confirmation</MudText>
                </MudPaper>
            </ChildContent>
        </MudTabPanel>
    </MudTabs>
</MudPaper>


<!-- Terms and Conditions -->
<MudPaper Class="pa-4" Elevation="1">
    <MudCheckBox T="bool" @bind-Checked="PaymentData.AcceptTerms"
                 Color="Color.Primary"
                 Error="@(!PaymentData.AcceptTerms && _validationAttempted)">
        I agree to the <MudLink Href="#" Color="Color.Primary">Terms and Conditions</MudLink> and <MudLink Href="#" Color="Color.Primary">Privacy Policy</MudLink>
    </MudCheckBox>
    <MudCheckBox T="bool" @bind-Checked="PaymentData.AcceptRecurring"
                 Color="Color.Primary"
                 Class="mt-2"
                 Error="@(!PaymentData.AcceptRecurring && _validationAttempted)">
        I understand this is a recurring subscription that will automatically renew
    </MudCheckBox>
</MudPaper>

@code {
    [Parameter] public PaymentInfo PaymentData { get; set; } = new();
    [Parameter] public CreatorPlan? SelectedPlan { get; set; }
    [Parameter] public string SelectedCurrency { get; set; } = "USD";
    [Parameter] public EventCallback<PaymentInfo> OnPaymentDataChanged { get; set; }

    private bool _validationAttempted = false;

    protected override void OnInitialized()
    {
        // Set default payment method if not set
        if (string.IsNullOrEmpty(PaymentData.PaymentMethod))
        {
            PaymentData.PaymentMethod = "CreditCard";
        }
    }

    private async Task NotifyDataChanged()
    {
        _validationAttempted = true;
        await OnPaymentDataChanged.InvokeAsync(PaymentData);
        StateHasChanged();
    }

    private string GetDurationFromPaymentData()
    {
        // This should be passed as parameter or obtained from parent component
        // For now, defaulting to Monthly
        return "Monthly";
    }

    private string GetFormattedPrice(CreatorPlanPricing pricing, string currency)
    {
        var symbol = currency switch
        {
            "USD" => "$",
            "EUR" => "€",
            "GBP" => "£",
            _ => "$"
        };

        var value = currency switch
        {
            "USD" => pricing.ValueUSD,
            "EUR" => pricing.ValueEuro,
            "GBP" => pricing.ValueGbPound,
            _ => pricing.ValueUSD
        };

        return $"{symbol}{value:F2}";
    }

    public bool IsValid()
    {
        _validationAttempted = true;
        StateHasChanged();

        var basicConditions = PaymentData.AcceptTerms && PaymentData.AcceptRecurring;

        if (PaymentData.PaymentMethod == "CreditCard")
        {
            return basicConditions &&
                   !string.IsNullOrWhiteSpace(PaymentData.CardNumber) &&
                   !string.IsNullOrWhiteSpace(PaymentData.CardHolderName) &&
                   !string.IsNullOrWhiteSpace(PaymentData.ExpiryDate) &&
                   !string.IsNullOrWhiteSpace(PaymentData.CvvCode);
        }

        return basicConditions;
    }
}