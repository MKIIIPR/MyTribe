@page "/Account/Logout"
@using Microsoft.AspNetCore.Identity
@using Tribe.Data
@using Tribe.Services.ServerServices
@using Tribe.Client.Services

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Logout> Logger
@inject NavigationManager NavigationManager
@inject IAuthNotificationService AuthNotificationService
@inject IAuthService AuthService

<PageTitle>Logout</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="text-center">
                @if (isLoggingOut)
                {
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Logging out...</span>
                    </div>
                    <p class="mt-3">Logging you out...</p>
                }
                else
                {
                    <h2>Logout</h2>
                    <p>You have been successfully logged out.</p>
                    <a href="/" class="btn btn-primary">Go to Home</a>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private bool isLoggingOut = true;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get current user for SignalR notification
            var user = await SignInManager.UserManager.GetUserAsync(HttpContext.User);

            // Sign out from Identity
            await SignInManager.SignOutAsync();

            // Remove JWT cookie
            HttpContext.Response.Cookies.Delete("jwt_token", new CookieOptions
            {
                Path = "/",
                SameSite = SameSiteMode.Strict
            });

            // Notify SignalR clients
            if (user != null)
            {
                await AuthNotificationService.NotifyUserLoggedOutAsync(user.Id, user.UserName!);
            }

            Logger.LogInformation($"User {user?.UserName} logged out successfully.");

            isLoggingOut = false;

            // Redirect after a short delay
            await Task.Delay(1500);
            NavigationManager.NavigateTo(ReturnUrl ?? "/", forceLoad: true);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during logout");
            isLoggingOut = false;
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
    }
}